---
import { getCollection } from 'astro:content';
import Base from "@/layouts/Base.astro";
export async function getStaticPaths() {
  const guides = await getCollection('guide');
  return guides.map((g) => ({
    params: { slug: g.slug ?? g.id },
  }));
}
const slugParam = Astro.params.slug;
const slug = Array.isArray(slugParam) ? slugParam.join('/') : slugParam;
const guides = await getCollection('guide');
const guide = guides.find((g) => (g.slug ?? g.id) === slug);
if (!guide) throw new Error('Not found');
const { Content } = await guide.render();

// Get related guides (other published guides, excluding current)
const now = new Date();
const relatedGuides = guides
  .filter((g) => 
    !g.data.draft && 
    new Date(g.data.pubDate) <= now &&
    (g.slug ?? g.id) !== slug
  )
  .sort((a, b) => +b.data.pubDate - +a.data.pubDate)
  .slice(0, 3);
---
<Base
  title={guide.data.title}
  description={guide.data.description}
  canonical={guide.data.canonicalURL}
  ogType="article"
>
  <!-- Article Schema -->
  <script type="application/ld+json" is:inline set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "Article",
    "headline": guide.data.title,
    "description": guide.data.description,
    "author": {
      "@type": "Person",
      "name": "Duy Thanh",
      "url": "https://gptbreeze.io/author"
    },
    "publisher": {
      "@type": "Organization", 
      "name": "GPT Breeze",
      "logo": {
        "@type": "ImageObject",
        "url": "https://gptbreeze.io/media/hero/logo-56.png"
      },
      "url": "https://gptbreeze.io"
    },
    "datePublished": guide.data.pubDate.toISOString(),
    "dateModified": (guide.data.updatedDate || guide.data.pubDate).toISOString(),
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": `https://gptbreeze.io/guide/${slug}/`
    },
    "image": "https://gptbreeze.io/media/hero/logo-56.png",
    "articleSection": "Guide", 
    "keywords": guide.data.tags ? guide.data.tags.join(', ') : 'AI tools, Chrome extension, tutorial, guide'
  })}></script>

  <style>
    article {
      max-width: 800px;
      margin: 0 auto;
      a { 
        text-decoration: underline; 
      }
    }
    
    article header {
      margin-bottom: 32px;
      padding-bottom: 24px;
      border-bottom: 1px solid theme('colors.ui-border');
      position: relative;
    }
    
    article h1 {
      font-size: 2.5rem;
      line-height: 1.2;
      margin: 0 0 20px;
      color: theme('colors.brand-fg');
    }
    
    .article-meta {
      display: flex;
      align-items: center;
      gap: 20px;
      margin: 20px 0;
      font-size: 0.95rem;
      color: theme('colors.brand-muted');
      flex-wrap: wrap;
    }
    
    .article-meta time {
      display: flex;
      align-items: center;
      gap: 6px;
    }
    
    .author-link {
      display: flex;
      align-items: center;
      gap: 8px;
      text-decoration: none;
      color: theme('colors.brand-muted');
      transition: color 0.2s ease;
    }
    
    .author-link:hover {
      color: theme('colors.accent-blue');
    }
    
    .author-avatar {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      background-image: url('/duythanh.png');
      background-size: cover;
      background-position: center;
      border: 1px solid theme('colors.accent-blue');
    }
    
    .tags {
      display: flex;
      gap: 8px;
      flex-wrap: wrap;
      margin-top: 16px;
    }
    
    .tag {
      background: theme('colors.gray-200');
      color: theme('colors.gray-600');
      padding: 6px 12px;
      border-radius: 6px;
      font-size: 0.85rem;
      font-weight: 500;
      text-decoration: none;
      transition: all 0.2s ease;
    }
    
    .tag:hover {
      background: theme('colors.gray-200');
      color: theme('colors.gray-700');
    }
    
    .article-content {
      line-height: 1.7;
    }
    
    .article-content h2,
    .article-content h3,
    .article-content h4 {
      margin: 32px 0 16px;
      color: theme('colors.brand-fg');
    }
    
    .article-content p {
      margin: 16px 0;
      color: theme('colors.brand-muted');
    }
    
    .article-content ul,
    .article-content ol {
      margin: 16px 0;
      padding-left: 24px;
    }
    
    .article-content li {
      margin: 8px 0;
      color: theme('colors.brand-muted');
    }
    
    .article-content table,
    .article-content :global(table) {
      width: 100%;
      border-collapse: collapse;
      margin: 24px 0;
      background: theme('colors.ui-surface');
      border: 1px solid theme('colors.ui-border');
      border-radius: 8px;
      overflow: hidden;
    }
    
    .article-content th,
    .article-content td,
    .article-content :global(th),
    .article-content :global(td) {
      padding: 12px 16px;
      text-align: left;
      border-bottom: 1px solid theme('colors.ui-border');
    }
    
    .article-content th,
    .article-content :global(th) {
      background: theme('colors.gray-100');
      font-weight: 600;
      color: theme('colors.brand-fg');
    }
    
    .article-content td,
    .article-content :global(td) {
      color: theme('colors.brand-muted');
    }
    
    .article-content tr:last-child th,
    .article-content tr:last-child td,
    .article-content :global(tr:last-child th),
    .article-content :global(tr:last-child td) {
      border-bottom: none;
    }
    
    .article-content tr:hover,
    .article-content :global(tr:hover) {
      background: theme('colors.gray-100');
    }
    
    @media (max-width: 768px) {
      article h1 {
        font-size: 2rem;
      }
      
      .article-meta {
        flex-direction: column;
        align-items: flex-start;
        gap: 12px;
      }
    }
    
    .related-guides {
      margin-top: 64px;
      padding-top: 32px;
      border-top: 1px solid theme('colors.ui-border');
    }
    
    .related-guides h3 {
      margin: 0 0 24px;
      color: theme('colors.brand-fg');
      font-size: 1.5rem;
    }
    
    .related-grid {
      display: grid;
      gap: 20px;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    }
    
    .related-card {
      background: theme('colors.ui-surface');
      border: 1px solid theme('colors.ui-border');
      border-radius: 12px;
      padding: 20px;
      text-decoration: none;
      color: inherit;
      transition: all 0.2s ease;
    }
    
    .related-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px theme('colors.shadow-medium');
      border-color: theme('colors.accent-blue');
    }
    
    .related-card h4 {
      margin: 0 0 8px;
      font-size: 1.1rem;
      line-height: 1.4;
      color: theme('colors.brand-fg');
    }
    
    .related-card p {
      margin: 0 0 12px;
      font-size: 0.9rem;
      color: theme('colors.brand-muted');
      line-height: 1.5;
    }
    
    .related-card time {
      font-size: 0.85rem;
      color: theme('colors.brand-muted');
    }
  </style>

  <article>
    <header>
      <h1>{guide.data.title}</h1>
      <div class="article-meta">
        <a href="/author" class="author-link">
          <div class="author-avatar"></div>
          <span>Duy Thanh</span>
        </a>
        {guide.data.pubDate && (
          <time datetime={guide.data.pubDate.toISOString()}>
            <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
              <path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/>
            </svg>
            {new Intl.DateTimeFormat('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            }).format(guide.data.pubDate)}
          </time>
        )}
        <span>~ 10 min read</span>
      </div>
      {guide.data.tags && guide.data.tags.length > 0 && (
        <div class="tags">
          {guide.data.tags.map((tag: string) => (
            <span class="tag">{tag}</span>
          ))}
        </div>
      )}
    </header>
    <div class="article-content">
      <Content />
    </div>
    
    {relatedGuides.length > 0 && (
      <section class="related-guides">
        <h3>Related Guides</h3>
        <div class="related-grid">
          {relatedGuides.map((relatedGuide) => (
            <a href={`/guide/${relatedGuide.slug ?? relatedGuide.id}/`} class="related-card">
              <h4>{relatedGuide.data.title}</h4>
              {relatedGuide.data.description && (
                <p>{relatedGuide.data.description.slice(0, 120)}...</p>
              )}
              {relatedGuide.data.pubDate && (
                <time datetime={relatedGuide.data.pubDate.toISOString()}>
                  {new Intl.DateTimeFormat('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                  }).format(relatedGuide.data.pubDate)}
                </time>
              )}
            </a>
          ))}
        </div>
      </section>
    )}
  </article>
</Base>