---
import Base from "@/layouts/Base.astro";
import modelsData from "@/data/models-api.json";
import "@/styles/calculator.css";

const title = "LLM Price Calculator - Compare AI Model Costs | GPT Breeze";
const description = "Compare costs across different AI models and providers. Calculate your expected usage costs with our interactive LLM price calculator.";
---

<Base title={title} description={description} isLandingPage={true}>
  <link slot="head" rel="preconnect" href="https://fonts.googleapis.com">
  <link slot="head" rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link slot="head" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">

  <header>
    <div class="container nav">
      <div class="brand">
        <img
          class="brand-logo"
          src="/media/hero/logo-56.png"
          srcset="/media/hero/logo-28.png 1x, /media/hero/logo-56.png 2x"
          alt="GPT Breeze logo"
          width="28"
          height="28"
          loading="eager"
          decoding="async"
        />
        GPT Breeze
      </div>
      <nav class="menu" aria-label="Main Navigation">
        <a href="/">Home</a>
        <a href="/guide">Guide</a>
        <a href="/blog">Blog</a>
        <a href="/privacy">Privacy</a>
        <a class="install" href="https://chromewebstore.google.com/detail/gpt-breeze-chatgpt-ai-sho/plchckmceefljjjphgfcadhlfnlindog">Add to Chrome</a>
      </nav>
    </div>
  </header>

  <section class="hero">
    <div class="container">
      <div class="bg"></div>
      <h1 class="display">
        LLM <span class="em">Price Calculator</span>
      </h1>
      <p class="lead center" style="max-width: 720px; margin-inline:auto;">
        Compare costs across different AI models and providers. Make informed decisions with real-time pricing calculations.
      </p>
    </div>
  </section>

  <section>
    <div class="container">
      <h2 class="section-title">Usage Parameters</h2>
      <p class="subtle">Adjust token counts to see how pricing changes across different models</p>
      
      <div class="calculator-inputs">
        <div class="input-group">
          <label for="inputTokens" class="input-label">Input Tokens</label>
          <input
            type="number"
            id="inputTokens"
            value="10000"
            min="0"
            step="1000"
            class="input-field"
          />
          <p class="input-hint">
            <span id="inputTokensDisplay">10,000</span> tokens
          </p>
        </div>

        <div class="input-group">
          <label for="outputTokens" class="input-label">Output Tokens</label>
          <input
            type="number"
            id="outputTokens"
            value="2000"
            min="0"
            step="1000"
            class="input-field"
          />
          <p class="input-hint">
            <span id="outputTokensDisplay">2,000</span> tokens
          </p>
        </div>

        <div class="input-group">
          <label for="cacheReadTokens" class="input-label">Cache Read Tokens</label>
          <input
            type="number"
            id="cacheReadTokens"
            value="0"
            min="0"
            step="1000"
            class="input-field"
          />
          <p class="input-hint">
            <span id="cacheReadTokensDisplay">0</span> tokens
          </p>
        </div>
      </div>

      <div class="info-box">
        <p>Costs are calculated per million tokens. All pricing data is sourced from official provider documentation.</p>
      </div>
    </div>
  </section>

  <section>
    <div class="container">
      <h2 class="section-title">Model Cost Comparison</h2>
      <p class="subtle">Select models to compare their costs side-by-side</p>
      
      <div class="table-wrapper">
        <table class="data-table comparison-table">
          <thead>
            <tr id="comparisonTableHeader">
              <th class="th-left">Cost Type</th>
              <!-- Model columns populated by JavaScript -->
            </tr>
          </thead>
          <tbody id="comparisonTableBody">
            <!-- Populated by JavaScript -->
          </tbody>
        </table>
      </div>
    </div>
  </section>

  <style>
    /* Page-specific styles only - reusable styles are in calculator.css */
    .subtle {
      font-size: 0.95rem;
      color: var(--muted);
      margin-bottom: 16px;
    }

    .comparison-table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0;
    }

    .comparison-table th {
      min-width: 180px;
      max-width: 200px;
      padding: 16px 12px;
      vertical-align: top;
      position: relative;
    }

    .comparison-table th:first-child {
      min-width: 200px;
      position: sticky;
      left: 0;
      background: white;
      z-index: 10;
    }

    .comparison-table .model-column-header {
      position: relative;
      min-height: 100px;
    }

    .comparison-table .remove-model-btn {
      position: absolute;
      top: 0;
      right: 0;
      background: #ef4444;
      color: white;
      border: none;
      border-radius: 4px;
      width: 24px;
      height: 24px;
      font-size: 16px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 0;
      line-height: 1;
    }

    .comparison-table .remove-model-btn:hover {
      background: #dc2626;
    }

    .comparison-table .search-column {
      background: linear-gradient(135deg, #f9fafb 0%, #f0f9ff 100%);
      border-left: 2px dashed #d1d5db;
      vertical-align: top;
      padding: 16px 12px;
      min-width: 240px;
      position: relative;
    }

    .search-wrapper-compact {
      position: relative;
    }

    .search-input-compact {
      width: 100%;
      padding: 10px 36px 10px 12px;
      font-size: 0.875rem;
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      transition: all 0.2s ease;
      background: white;
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
    }

    .search-input-compact:focus {
      outline: none;
      border-color: #6366f1;
      box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
    }

    .search-input-compact::placeholder {
      color: #9ca3af;
    }

    .search-icon {
      position: absolute;
      right: 12px;
      top: 50%;
      transform: translateY(-50%);
      color: #9ca3af;
      pointer-events: none;
      font-size: 14px;
    }

    .search-results-dropdown {
      position: absolute;
      top: calc(100% + 4px);
      left: 0;
      right: 0;
      max-height: 320px;
      overflow-y: auto;
      background: white;
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      margin-top: 4px;
      box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 
                  0 8px 10px -6px rgba(0, 0, 0, 0.1);
      z-index: 50;
      animation: slideDown 0.15s ease-out;
      display: block;
    }

    .search-results-dropdown:empty {
      display: none;
    }

    @keyframes slideDown {
      from {
        opacity: 0;
        transform: translateY(-8px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .search-results-dropdown::-webkit-scrollbar {
      width: 6px;
    }

    .search-results-dropdown::-webkit-scrollbar-track {
      background: #f3f4f6;
      border-radius: 3px;
    }

    .search-results-dropdown::-webkit-scrollbar-thumb {
      background: #d1d5db;
      border-radius: 3px;
    }

    .search-results-dropdown::-webkit-scrollbar-thumb:hover {
      background: #9ca3af;
    }

    .search-result-item {
      padding: 12px 14px !important;
      cursor: pointer !important;
      border-bottom: 1px solid #f3f4f6 !important;
      transition: all 0.15s ease !important;
      display: flex !important;
      flex-direction: row !important;
      align-items: center !important;
      gap: 10px !important;
      background: white !important;
      position: relative !important;
    }

    .search-result-item:hover {
      background: linear-gradient(90deg, #f0f9ff 0%, #e0f2fe 100%) !important;
    }
    
    .search-result-item:hover::before {
      content: '' !important;
      position: absolute !important;
      left: 0 !important;
      top: 0 !important;
      bottom: 0 !important;
      width: 3px !important;
      background: #6366f1 !important;
    }

    .search-result-item:last-child {
      border-bottom: none;
    }

    .search-result-item:first-child {
      border-top-left-radius: 8px;
      border-top-right-radius: 8px;
    }

    .search-result-item:last-child {
      border-bottom-left-radius: 8px;
      border-bottom-right-radius: 8px;
    }
    
    .search-result-item:hover:first-child {
      border-top-left-radius: 8px;
    }
    
    .search-result-item:hover:last-child {
      border-bottom-left-radius: 8px;
    }

    .search-result-item:active {
      background: #dbeafe;
      transform: scale(0.98);
    }

    .search-result-content {
      flex: 1 !important;
      min-width: 0 !important;
      display: flex !important;
      flex-direction: column !important;
      gap: 2px !important;
    }

    .search-result-name {
      font-size: 0.875rem !important;
      font-weight: 600 !important;
      color: #111827 !important;
      line-height: 1.3 !important;
      white-space: nowrap !important;
      overflow: hidden !important;
      text-overflow: ellipsis !important;
    }

    .search-result-provider {
      font-size: 0.75rem !important;
      color: #6b7280 !important;
      line-height: 1.2 !important;
      display: flex !important;
      align-items: center !important;
      gap: 4px !important;
    }

    .search-result-provider::before {
      content: '•' !important;
      color: #d1d5db !important;
    }

    .search-result-meta {
      display: flex;
      gap: 8px;
      align-items: center;
      margin-top: 2px;
    }

    .search-result-badge {
      display: inline-block !important;
      padding: 4px 10px !important;
      background: #f3f4f6 !important;
      color: #6b7280 !important;
      border-radius: 12px !important;
      font-size: 0.688rem !important;
      font-weight: 500 !important;
      text-transform: uppercase;
      letter-spacing: 0.3px;
      white-space: nowrap !important;
      flex-shrink: 0 !important;
    }

    .badge-free {
      background: #dcfce7 !important;
      color: #166534 !important;
    }

    .badge-cost {
      background: #eff6ff !important;
      color: #1d4ed8 !important;
    }

    .search-no-results {
      padding: 24px 16px;
      text-align: center;
      color: #6b7280;
      font-size: 0.875rem;
      line-height: 1.5;
    }

    .search-no-results-icon {
      font-size: 2rem;
      margin-bottom: 8px;
      opacity: 0.5;
    }

    .search-hint-text {
      margin-top: 8px;
      font-size: 0.75rem;
      color: #9ca3af;
      text-align: center;
      font-style: italic;
    }

    .table-wrapper {
      overflow-x: auto;
      margin-top: 24px;
    }

    .comparison-table tbody tr:first-child td {
      padding-top: 16px;
    }

    .model-info {
      margin-bottom: 12px;
    }

    .model-name {
      font-weight: 600;
      font-size: 0.875rem;
      color: #111827;
      margin-bottom: 4px;
    }

    .model-provider {
      font-size: 0.75rem;
      color: #6b7280;
    }
  </style>

  <script define:vars={{ modelsData }}>
    // Global state
    let selectedModels = [];
    let allModels = [];
    let searchQuery = '';
    let searchResults = [];
    let showSearchDropdown = false;

    // Initialize
    function init() {
      // Flatten models data
      Object.entries(modelsData).forEach(([providerId, provider]) => {
        Object.entries(provider.models).forEach(([modelId, model]) => {
          allModels.push({
            ...model,
            providerId,
            providerName: provider.name,
            fullId: `${providerId}/${modelId}`
          });
        });
      });

      // Setup event listeners
      document.getElementById('inputTokens').addEventListener('input', updateCalculations);
      document.getElementById('outputTokens').addEventListener('input', updateCalculations);
      document.getElementById('cacheReadTokens').addEventListener('input', updateCalculations);

      // Initial render
      updateCalculations();
    }

    // Handle search in dropdown
    function handleSearchInput(e) {
      searchQuery = e.target.value.toLowerCase().trim();
      
      if (searchQuery === '') {
        searchResults = [];
        showSearchDropdown = false;
      } else {
        searchResults = allModels
          .filter(model => 
            !selectedModels.includes(model.fullId) && (
              model.name.toLowerCase().includes(searchQuery) ||
              model.providerName.toLowerCase().includes(searchQuery) ||
              model.id.toLowerCase().includes(searchQuery)
            )
          )
          .slice(0, 10); // Limit to 10 results
        showSearchDropdown = true;
      }
      
      renderSearchDropdown();
    }

    // Render search dropdown
    function renderSearchDropdown() {
      const dropdown = document.getElementById('searchDropdown');
      
      if (!showSearchDropdown || searchResults.length === 0) {
        if (searchQuery !== '' && searchResults.length === 0) {
          dropdown.innerHTML = `
            <div class="search-no-results">
              <div class="search-no-results-icon">🔍</div>
              <div>No models found matching "<strong>${searchQuery}</strong>"</div>
              <div class="search-hint-text">Try a different search term</div>
            </div>
          `;
        } else {
          dropdown.innerHTML = '';
        }
        return;
      }

      dropdown.innerHTML = searchResults.map(model => {
        // Format cost info
        const inputCost = model.cost?.input || 0;
        const outputCost = model.cost?.output || 0;
        const isFree = inputCost === 0 && outputCost === 0;
        
        return `
          <div class="search-result-item" onclick="selectModelFromSearch('${model.fullId}')">
            <div class="search-result-content">
              <div class="search-result-name">${model.name}</div>
              <div class="search-result-provider">${model.providerName}</div>
            </div>
            ${isFree ? 
              '<span class="search-result-badge badge-free">FREE</span>' : 
              `<span class="search-result-badge badge-cost">${inputCost.toFixed(2)} / ${outputCost.toFixed(2)}</span>`
            }
          </div>
        `;
      }).join('');
    }

    // Select model from search
    function selectModelFromSearch(fullId) {
      if (!selectedModels.includes(fullId)) {
        selectedModels.push(fullId);
        
        // Clear search
        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
          searchInput.value = '';
          searchQuery = '';
          searchResults = [];
          showSearchDropdown = false;
          renderSearchDropdown();
        }
        
        updateCalculations();
      }
    }

    // Make function global
    window.selectModelFromSearch = selectModelFromSearch;

    // Calculate cost for a model
    function calculateCost(model, inputTokens, outputTokens, cacheReadTokens) {
      // Handle missing cost data
      if (!model || !model.cost) {
        return 0;
      }
      
      const inputCost = (inputTokens / 1000000) * (model.cost.input || 0);
      const outputCost = (outputTokens / 1000000) * (model.cost.output || 0);
      const cacheCost = (cacheReadTokens / 1000000) * (model.cost.cache_read || 0);
      return inputCost + outputCost + cacheCost;
    }

    // Format cost
    function formatCost(cost) {
      if (cost === 0) return 'FREE';
      if (cost < 0.01) return `${cost.toFixed(4)}`;
      return `${cost.toFixed(3)}`;
    }

    // Format number with commas
    function formatNumber(num) {
      return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }

    // Update all calculations
    function updateCalculations() {
      const inputTokens = Number(document.getElementById('inputTokens').value);
      const outputTokens = Number(document.getElementById('outputTokens').value);
      const cacheReadTokens = Number(document.getElementById('cacheReadTokens').value);

      // Update displays
      document.getElementById('inputTokensDisplay').textContent = formatNumber(inputTokens);
      document.getElementById('outputTokensDisplay').textContent = formatNumber(outputTokens);
      document.getElementById('cacheReadTokensDisplay').textContent = formatNumber(cacheReadTokens);

      // Render comparison table
      renderComparisonTable(inputTokens, outputTokens, cacheReadTokens);
    }

    // Render comparison table
    function renderComparisonTable(inputTokens, outputTokens, cacheReadTokens) {
      const thead = document.getElementById('comparisonTableHeader');
      const tbody = document.getElementById('comparisonTableBody');

      // Get selected models data
      const selectedModelsData = allModels.filter(m => selectedModels.includes(m.fullId));

      // Build table header
      thead.innerHTML = '<th class="th-left">Cost Type</th>';
      
      // Add columns for selected models
      selectedModelsData.forEach(model => {
        thead.innerHTML += `
          <th class="th-center model-column-header">
            <div class="model-info">
              <div class="model-name">${model.name}</div>
              <div class="model-provider">${model.providerName}</div>
            </div>
            <button 
              class="remove-model-btn"
              onclick="removeModel('${model.fullId}')"
              title="Remove model">
              ×
            </button>
          </th>
        `;
      });

      // Add search column
      thead.innerHTML += `
        <th class="th-center search-column">
          <div class="search-wrapper-compact">
            <input
              type="text"
              id="searchInput"
              class="search-input-compact"
              placeholder="Search to add model..."
              oninput="handleSearchInput(event)"
            />
            <span class="search-icon">🔍</span>
            <div id="searchDropdown" class="search-results-dropdown" style="
              position: absolute;
              top: calc(100% + 8px);
              left: 0;
              right: 0;
              max-height: 320px;
              overflow-y: auto;
              background: white;
              border: 1px solid #e5e7eb;
              border-radius: 8px;
              box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1);
              z-index: 999;
            "></div>
          </div>
          <div class="search-hint-text">Type to find models</div>
        </th>
      `;

      // Calculate costs for each model
      const costs = selectedModelsData.map(model => {
        const inputCost = (inputTokens / 1000000) * (model.cost?.input || 0);
        const outputCost = (outputTokens / 1000000) * (model.cost?.output || 0);
        const cacheCost = (cacheReadTokens / 1000000) * (model.cost?.cache_read || 0);
        const totalCost = inputCost + outputCost + cacheCost;
        
        return {
          model,
          inputCost,
          outputCost,
          cacheCost,
          totalCost,
          inputRate: model.cost?.input || 0,
          outputRate: model.cost?.output || 0,
          cacheRate: model.cost?.cache_read || 0
        };
      });

      // Build table rows
      let rows = '';

      // Only show rows if there are selected models
      if (selectedModelsData.length > 0) {
        rows = `
          <tr>
            <td class="text-primary"><strong>Input Cost Rate</strong></td>
            ${costs.map(c => `<td class="text-center text-secondary">${c.inputRate.toFixed(2)}/1M</td>`).join('')}
            <td class="search-column"></td>
          </tr>
          <tr>
            <td class="text-primary"><strong>Output Cost Rate</strong></td>
            ${costs.map(c => `<td class="text-center text-secondary">${c.outputRate.toFixed(2)}/1M</td>`).join('')}
            <td class="search-column"></td>
          </tr>
          <tr class="highlighted">
            <td class="text-primary"><strong>Input Cost</strong><br/><span style="font-size: 0.875rem; color: #6b7280;">(${formatNumber(inputTokens)} tokens)</span></td>
            ${costs.map(c => `<td class="text-center"><strong>${formatCost(c.inputCost)}</strong></td>`).join('')}
            <td class="search-column"></td>
          </tr>
          <tr class="highlighted">
            <td class="text-primary"><strong>Output Cost</strong><br/><span style="font-size: 0.875rem; color: #6b7280;">(${formatNumber(outputTokens)} tokens)</span></td>
            ${costs.map(c => `<td class="text-center"><strong>${formatCost(c.outputCost)}</strong></td>`).join('')}
            <td class="search-column"></td>
          </tr>
        `;

        if (cacheReadTokens > 0) {
          rows += `
            <tr>
              <td class="text-primary"><strong>Cache Read Cost</strong><br/><span style="font-size: 0.875rem; color: #6b7280;">(${formatNumber(cacheReadTokens)} tokens)</span></td>
              ${costs.map(c => `<td class="text-center">${formatCost(c.cacheCost)}</td>`).join('')}
              <td class="search-column"></td>
            </tr>
          `;
        }

        rows += `
          <tr class="selected" style="background: #f0f9ff;">
            <td class="text-primary"><strong style="font-size: 1.125rem;">Total Cost</strong></td>
            ${costs.map(c => `<td class="text-center"><strong style="font-size: 1.25rem; color: #6366f1;">${formatCost(c.totalCost)}</strong></td>`).join('')}
            <td class="search-column"></td>
          </tr>
        `;
      } else {
        // Show empty state
        rows = `
          <tr>
            <td class="text-center" style="padding: 40px; color: #6b7280;">
              Select models using the search box to compare costs
            </td>
            <td class="search-column"></td>
          </tr>
        `;
      }

      tbody.innerHTML = rows;

      // Re-attach search handler after DOM update
      const searchInput = document.getElementById('searchInput');
      if (searchInput) {
        searchInput.addEventListener('input', handleSearchInput);
      }
    }

    // Make functions global
    window.handleSearchInput = handleSearchInput;
    window.removeModel = function(fullId) {
      selectedModels = selectedModels.filter(id => id !== fullId);
      updateCalculations();
    };

    // Initialize on page load
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init);
    } else {
      init();
    }
  </script>
</Base>
