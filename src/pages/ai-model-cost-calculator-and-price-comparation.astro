---
import Base from "@/layouts/Base.astro";
import modelsData from "@/data/models-api.json";
import "@/styles/calculator.css";

const title = "AI Model Cost Calculator - Compare LLM Pricing & API Costs | GPT Breeze";
const description = "Calculate and compare AI model costs across OpenAI, Anthropic, and other providers. Find the best AI model for your budget with our interactive calculator. No subscription required - use your own API key.";
---

<Base title={title} description={description} isLandingPage={true}>
  <link slot="head" rel="preconnect" href="https://fonts.googleapis.com">
  <link slot="head" rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link slot="head" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
  
  <script slot="head" type="application/ld+json" is:inline>
    {
      "@context": "https://schema.org",
      "@type": "WebApplication",
      "name": "AI Model Cost Calculator",
      "description": "Calculate and compare AI model costs across OpenAI, Anthropic, and other providers. Find the best AI model for your budget with our interactive calculator. No subscription required - use your own API key.",
      "applicationCategory": "CalculatorApplication",
      "operatingSystem": "Any",
      "offers": {
        "@type": "Offer",
        "name": "GPT Breeze",
        "description": "Chrome extension for using AI models in your browser",
        "price": "0",
        "priceCurrency": "USD"
      },
      "creator": {
        "@type": "Organization",
        "name": "GPT Breeze"
      },
      "featureList": [
        "Compare AI model costs",
        "BYOM (Bring Your Own Model) pricing",
        "Real-time cost calculations",
        "Multiple provider support"
      ]
    }
  </script>
  
  <script slot="head" type="application/ld+json" is:inline>
    {
      "@context": "https://schema.org",
      "@type": "FAQPage",
      "mainEntity": [
        {
          "@type": "Question",
          "name": "How accurate are these cost calculations?",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "Our calculator uses current pricing data from AI providers. Costs are estimates and may vary based on special pricing tiers or promotions."
          }
        },
        {
          "@type": "Question",
          "name": "What are tokens in AI models?",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "Tokens are chunks of text that AI models process - roughly equivalent to 4 characters or 0.75 words in English. Both input (your prompt) and output (AI response) tokens are counted toward your usage."
          }
        },
        {
          "@type": "Question",
          "name": "Can I use this calculator for budget planning?",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "Yes, absolutely. Use the calculator to estimate monthly costs based on your expected usage patterns. This helps you choose the most cost-effective AI model for your needs."
          }
        },
        {
          "@type": "Question",
          "name": "What is BYOM (Bring Your Own Model)?",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "BYOM allows you to use your own API keys with various AI providers instead of subscribing to services. You maintain control of your data and only pay for what you use."
          }
        }
      ]
    }
  </script>

  <header>
    <div class="container nav">
      <div class="brand">
        <img
          class="brand-logo"
          src="/media/hero/logo-56.png"
          srcset="/media/hero/logo-28.png 1x, /media/hero/logo-56.png 2x"
          alt="GPT Breeze logo"
          width="28"
          height="28"
          loading="eager"
          decoding="async"
        />
        GPT Breeze
      </div>
      <nav class="menu" aria-label="Main Navigation">
        <a href="/">Home</a>
        <a href="/guide">Guide</a>
        <a href="/blog">Blog</a>
        <a href="/privacy">Privacy</a>
        <a class="install" href="https://chromewebstore.google.com/detail/gpt-breeze-chatgpt-ai-sho/plchckmceefljjjphgfcadhlfnlindog">Add to Chrome</a>
      </nav>
    </div>
  </header>

  <section class="hero">
    <div class="container">
      <div class="bg"></div>
      <h1 class="display">
        AI Model <span class="em">Cost Calculator</span>
      </h1>
      <p class="lead center" style="max-width: 720px; margin-inline:auto;">
        Compare costs across different AI models and providers instantly. Calculate your expected usage costs and find the most cost-effective model for your needs with our interactive calculator.
      </p>
    </div>
  </section>

  <section>
    <div class="container">

      <div class="card">
        <h2 class="section-title">Calculate Your AI Model Costs</h2>
        <p class="subtitle">Adjust token counts to see how pricing changes across different models. Use the pre-set buttons to estimate costs for common use cases.</p>
        
        <h3 class="subtitle" style="margin-top: 24px;">Common Use Cases</h3>
        <div class="usage-buttons">
          <button class="usage-btn" data-tokens="1950">🎥 YouTube Summary (10 min)</button>
          <button class="usage-btn" data-tokens="5200">📄 PDF Analysis (10 pages)</button>
          <button class="usage-btn" data-tokens="39000">📖 Book Analysis (100 pages)</button>
          <button class="usage-btn" data-tokens="117000">📚 Long Document (300 pages)</button>
        </div>
        
        <div class="calculator-inputs">
          <div class="input-group">
            <label for="inputTokens" class="input-label">Input Tokens</label>
            <input
              type="number"
              id="inputTokens"
              value="10000"
              min="0"
              step="1000"
              class="input-field"
            />
            <p class="input-hint">
              <span id="inputTokensDisplay">10,000</span> tokens
            </p>
          </div>

          <div class="input-group">
            <label for="outputTokens" class="input-label">Output Tokens</label>
            <input
              type="number"
              id="outputTokens"
              value="2000"
              min="0"
              step="1000"
              class="input-field"
            />
            <p class="input-hint">
              <span id="outputTokensDisplay">2,000</span> tokens
            </p>
          </div>

          <div class="input-group">
            <label for="cacheReadTokens" class="input-label">Cache Read Tokens</label>
            <input
              type="number"
              id="cacheReadTokens"
              value="0"
              min="0"
              step="1000"
              class="input-field"
            />
            <p class="input-hint">
              <span id="cacheReadTokensDisplay">0</span> tokens
            </p>
          </div>
      </div>

        <h2 class="section-title">Compare AI Model Costs</h2>
        <p class="subtitle">Select models to compare their costs side-by-side. Our calculator includes pricing from OpenAI, Anthropic, OpenRouter, and other providers.</p>
        
        <div class="table-wrapper">
          <table class="data-table comparison-table">
            <thead>
              <tr id="comparisonTableHeader">
                <th class="th-left">Cost Type</th>
                <!-- Model columns populated by JavaScript -->
              </tr>
            </thead>
            <tbody id="comparisonTableBody">
              <!-- Populated by JavaScript -->
            </tbody>
          </table>
        </div>
        <p class="muted" style="margin-top: 16px;">Note: Costs are displayed in USD dollars and based on current provider pricing</p>
      </div>

      <section>
        <h2 class="section-title">How to Choose the Right AI Model</h2>
        <div class="two" style="margin-top: 16px;">
          <div>
            <h3 class="subtitle">Consider These Factors:</h3>
            <ul class="list">
              <li><strong>Cost per million tokens:</strong> Compare input and output costs</li>
              <li><strong>Model capabilities:</strong> Accuracy, reasoning, and specialized tasks</li>
              <li><strong>Privacy requirements:</strong> Data handling and security</li>
              <li><strong>Latency needs:</strong> Response time requirements</li>
            </ul>
          </div>
          <div>
            <h3 class="subtitle">BYOM (Bring Your Own Model) Benefits:</h3>
            <ul class="list">
              <li>Control over your data and privacy</li>
              <li>No recurring subscription costs</li>
              <li>Pay only for what you use</li>
              <li>Flexibility to switch providers</li>
            </ul>
          </div>
        </div>
      </section>
      <section>
        <h2 class="section-title">Why Use an AI Cost Calculator?</h2>
        <p class="subtitle">
          When using AI models like GPT-4, Claude, or open-source alternatives, understanding the real cost of API usage is crucial. 
          Our calculator helps you make informed decisions about which model fits your budget and usage patterns.
        </p>
        <div class="two" style="margin-top: 24px;">
          <div>
            <h3 class="subtitle">Budget Planning</h3>
            <p class="muted">Estimate monthly costs before committing to an AI provider</p>
          </div>
          <div>
            <h3 class="subtitle">Model Comparison</h3>
            <p class="muted">Compare pricing across multiple AI providers side-by-side</p>
          </div>
          <div>
            <h3 class="subtitle">Usage Optimization</h3>
            <p class="muted">Understand how input/output ratios affect total costs</p>
          </div>
        </div>
      </section>
      <div class="card">
        <h2 class="section-title">Ready to Use These AI Models in Your Browser?</h2>
        <p class="subtitle">GPT Breeze is a free Chrome extension that lets you use any AI model directly in your browser - no subscription required. Use your own API keys with OpenAI, Anthropic, or other providers.</p>
        <div class="hero-actions">
          <a 
            href="https://chromewebstore.google.com/detail/gpt-breeze-chatgpt-ai-sho/plchckmceefljjjphgfcadhlfnlindog" 
            class="btn primary"
          >
            Add GPT Breeze to Chrome - Free
          </a>
          <a 
            href="/guide" 
            class="btn outline"
          >
            Learn How to Set Up API Keys
          </a>
        </div>
        <p class="muted" style="margin-top: 16px; text-align: center;">
          Join thousands of users saving hours on content consumption with AI assistance
        </p>
      </div>

      <section>
        <h2 class="section-title">Frequently Asked Questions</h2>
        <details style="margin-bottom: 16px;">
          <summary>How accurate are these cost calculations?</summary>
          <p class="muted" style="margin-top: 8px;">Our calculator uses current pricing data from AI providers. Costs are estimates and may vary based on special pricing tiers or promotions.</p>
        </details>
        <details style="margin-bottom: 16px;">
          <summary>What are tokens in AI models?</summary>
          <p class="muted" style="margin-top: 8px;">Tokens are chunks of text that AI models process - roughly equivalent to 4 characters or 0.75 words in English. Both input (your prompt) and output (AI response) tokens are counted toward your usage.</p>
        </details>
        <details style="margin-bottom: 16px;">
          <summary>Can I use this calculator for budget planning?</summary>
          <p class="muted" style="margin-top: 8px;">Yes, absolutely. Use the calculator to estimate monthly costs based on your expected usage patterns. This helps you choose the most cost-effective AI model for your needs.</p>
        </details>
        <details>
          <summary>What is BYOM (Bring Your Own Model)?</summary>
          <p class="muted" style="margin-top: 8px;">BYOM allows you to use your own API keys with various AI providers instead of subscribing to services. You maintain control of your data and only pay for what you use.</p>
        </details>
      </section>
    </div>
  </section>

  <script define:vars={{ modelsData }} is:inline>
    // Global state
    let selectedModels = ['openai/gpt-4.1-nano', 'openai/gpt-5-nano'];
    let allModels = [];
    let searchQuery = '';
    let searchResults = [];
    let showSearchDropdown = false;

    // Initialize
    function init() {
      // Flatten models data
      Object.entries(modelsData).forEach(([providerId, provider]) => {
        Object.entries(provider.models).forEach(([modelId, model]) => {
          allModels.push({
            ...model,
            providerId,
            providerName: provider.name,
            fullId: `${providerId}/${modelId}`
          });
        });
      });

      // Setup event listeners
      document.getElementById('inputTokens').addEventListener('input', updateCalculations);
      document.getElementById('outputTokens').addEventListener('input', updateCalculations);
      document.getElementById('cacheReadTokens').addEventListener('input', updateCalculations);

      // Add event listeners for usage buttons
      const usageButtons = document.querySelectorAll('.usage-btn');
      usageButtons.forEach(button => {
        button.addEventListener('click', function() {
          const tokens = parseInt(this.getAttribute('data-tokens'));
          // Set input tokens to the clicked button's value
          document.getElementById('inputTokens').value = tokens;
          // Set output tokens to 60% of input tokens as specified
          document.getElementById('outputTokens').value = Math.round(tokens * 0.6);
          updateCalculations();
        });
      });

      // Initial render
      updateCalculations();
    }

    // Handle search in dropdown
    function handleSearchInput(e) {
      searchQuery = e.target.value.toLowerCase().trim();
      
      if (searchQuery === '') {
        searchResults = [];
        showSearchDropdown = false;
      } else {
        searchResults = allModels
          .filter(model => 
            !selectedModels.includes(model.fullId) && (
              model.name.toLowerCase().includes(searchQuery) ||
              model.providerName.toLowerCase().includes(searchQuery) ||
              model.id.toLowerCase().includes(searchQuery)
            )
          )
          .slice(0, 10); // Limit to 10 results
        showSearchDropdown = true;
      }
      
      renderSearchDropdown();
    }

    // Render search dropdown
    function renderSearchDropdown() {
      const dropdown = document.getElementById('searchDropdown');
      
      if (!showSearchDropdown || searchResults.length === 0) {
        if (searchQuery !== '' && searchResults.length === 0) {
          dropdown.innerHTML = `
            <div class="search-no-results">
              <div class="search-no-results-icon">🔍</div>
              <div>No models found matching "<strong>${searchQuery}</strong>"</div>
              <div class="search-hint-text">Try a different search term</div>
            </div>
          `;
        } else {
          dropdown.innerHTML = '';
        }
        return;
      }

      dropdown.innerHTML = searchResults.map(model => {
        // Format cost info
        const inputCost = model.cost?.input || 0;
        const outputCost = model.cost?.output || 0;
        const isFree = inputCost === 0 && outputCost === 0;
        
        return `
          <div class="search-result-item" onclick="selectModelFromSearch('${model.fullId}')">
            <div class="search-result-content">
              <div class="search-result-name">${model.name}</div>
              <div class="search-result-provider">${model.providerName}</div>
            </div>
            ${isFree ? 
              '<span class="search-result-badge badge-free">FREE</span>' : 
              `<span class="search-result-badge badge-cost">${inputCost.toFixed(2)} / ${outputCost.toFixed(2)}</span>`
            }
          </div>
        `;
      }).join('');
    }

    // Select model from search
    function selectModelFromSearch(fullId) {
      if (!selectedModels.includes(fullId)) {
        selectedModels.push(fullId);
        
        // Clear search
        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
          searchInput.value = '';
          searchQuery = '';
          searchResults = [];
          showSearchDropdown = false;
          renderSearchDropdown();
        }
        
        updateCalculations();
      }
    }

    // Make function global
    window.selectModelFromSearch = selectModelFromSearch;

    // Format cost
    function formatCost(cost) {
      if (cost === 0) return 'FREE';
      if (cost < 0.01) return `${cost.toFixed(4)}`;
      return `${cost.toFixed(3)}`;
    }

    // Format number with commas
    function formatNumber(num) {
      return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }

    // Update all calculations
    function updateCalculations() {
      const inputTokens = Number(document.getElementById('inputTokens').value);
      const outputTokens = Number(document.getElementById('outputTokens').value);
      const cacheReadTokens = Number(document.getElementById('cacheReadTokens').value);

      // Update displays
      document.getElementById('inputTokensDisplay').textContent = formatNumber(inputTokens);
      document.getElementById('outputTokensDisplay').textContent = formatNumber(outputTokens);
      document.getElementById('cacheReadTokensDisplay').textContent = formatNumber(cacheReadTokens);

      // Render comparison table
      renderComparisonTable(inputTokens, outputTokens, cacheReadTokens);
    }

    // Render comparison table
    function renderComparisonTable(inputTokens, outputTokens, cacheReadTokens) {
      const thead = document.getElementById('comparisonTableHeader');
      const tbody = document.getElementById('comparisonTableBody');

      // Get selected models data
      const selectedModelsData = allModels.filter(m => selectedModels.includes(m.fullId));

      // Build table header
      thead.innerHTML = '<th class="th-left">Cost Type</th>';
      
      // Add columns for selected models
      selectedModelsData.forEach(model => {
        thead.innerHTML += `
          <th class="th-center model-column-header">
            <div class="model-info">
              <div class="model-name">${model.name}</div>
              <div class="model-provider">${model.providerName}</div>
            </div>
            <button 
              class="remove-model-btn"
              onclick="removeModel('${model.fullId}')"
              title="Remove model">
              ×
            </button>
          </th>
        `;
      });

      // Add search column
      thead.innerHTML += `
        <th class="th-center search-column">
          <div class="search-wrapper-compact">
            <input
              type="text"
              id="searchInput"
              class="search-input-compact"
              placeholder="Search to add model..."
              oninput="handleSearchInput(event)"
            />
            <span class="search-icon">🔍</span>
            <div id="searchDropdown" class="search-results-dropdown" style="
              position: absolute;
              top: calc(100% + 8px);
              left: 0;
              right: 0;
              max-height: 320px;
              overflow-y: auto;
              background: white;
              border: 1px solid #e5e7eb;
              border-radius: 8px;
              box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1);
              z-index: 999;
            "></div>
          </div>
          <div class="search-hint-text">Type to find models</div>
        </th>
      `;

      // Calculate costs for each model
      const costs = selectedModelsData.map(model => {
        const inputCost = (inputTokens / 1000000) * (model.cost?.input || 0);
        const outputCost = (outputTokens / 1000000) * (model.cost?.output || 0);
        const cacheCost = (cacheReadTokens / 1000000) * (model.cost?.cache_read || 0);
        const totalCost = inputCost + outputCost + cacheCost;
        
        return {
          model,
          inputCost,
          outputCost,
          cacheCost,
          totalCost,
          inputRate: model.cost?.input || 0,
          outputRate: model.cost?.output || 0,
          cacheRate: model.cost?.cache_read || 0
        };
      });

      // Build table rows
      let rows = '';

      // Only show rows if there are selected models
      if (selectedModelsData.length > 0) {
        rows = `
          <tr>
            <td class="text-primary"><strong>Input Cost Rate</strong></td>
            ${costs.map(c => `<td class="text-center text-secondary">${c.inputRate.toFixed(2)}/1M</td>`).join('')}
            <td class="search-column"></td>
          </tr>
          <tr>
            <td class="text-primary"><strong>Output Cost Rate</strong></td>
            ${costs.map(c => `<td class="text-center text-secondary">${c.outputRate.toFixed(2)}/1M</td>`).join('')}
            <td class="search-column"></td>
          </tr>
          <tr class="highlighted">
            <td class="text-primary"><strong>Input Cost</strong><br/><span style="font-size: 0.875rem; color: #6b7280;">(${formatNumber(inputTokens)} tokens)</span></td>
            ${costs.map(c => `<td class="text-center"><strong>${formatCost(c.inputCost)}</strong></td>`).join('')}
            <td class="search-column"></td>
          </tr>
          <tr class="highlighted">
            <td class="text-primary"><strong>Output Cost</strong><br/><span style="font-size: 0.875rem; color: #6b7280;">(${formatNumber(outputTokens)} tokens)</span></td>
            ${costs.map(c => `<td class="text-center"><strong>${formatCost(c.outputCost)}</strong></td>`).join('')}
            <td class="search-column"></td>
          </tr>
        `;

        if (cacheReadTokens > 0) {
          rows += `
            <tr>
              <td class="text-primary"><strong>Cache Read Cost</strong><br/><span style="font-size: 0.875rem; color: #6b7280;">(${formatNumber(cacheReadTokens)} tokens)</span></td>
              ${costs.map(c => `<td class="text-center">${formatCost(c.cacheCost)}</td>`).join('')}
              <td class="search-column"></td>
            </tr>
          `;
        }

        rows += `
          <tr class="selected" style="background: #f0f9ff;">
            <td class="text-primary"><strong style="font-size: 1.125rem;">Total Cost</strong></td>
            ${costs.map(c => `<td class="text-center"><strong style="font-size: 1.25rem; color: #6366f1;">${formatCost(c.totalCost)}</strong></td>`).join('')}
            <td class="search-column"></td>
          </tr>
        `;
      } else {
        // Show empty state
        rows = `
          <tr>
            <td class="text-center" style="padding: 40px; color: #6b7280;">
              Select models using the search box to compare costs
            </td>
            <td class="search-column"></td>
          </tr>
        `;
      }

      tbody.innerHTML = rows;

      // Re-attach search handler after DOM update
      const searchInput = document.getElementById('searchInput');
      if (searchInput) {
        searchInput.addEventListener('input', handleSearchInput);
      }
    }

    // Make functions global
    window.handleSearchInput = handleSearchInput;
    window.removeModel = function(fullId) {
      selectedModels = selectedModels.filter(id => id !== fullId);
      updateCalculations();
    };

    // Initialize on page load
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init);
    } else {
      init();
    }
  </script>
</Base>