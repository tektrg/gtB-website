---
import '../styles/global.css';
interface Props {
  title?: string;
  description?: string;
  canonical?: string;
  ogType?: 'website' | 'article';
  noIndex?: boolean;
  isLandingPage?: boolean;
  showBreadcrumbs?: boolean;
  breadcrumbs?: Array<{ label: string; href?: string }>;
}

const envNoIndex = import.meta.env.PUBLIC_NOINDEX === '1' || import.meta.env.PUBLIC_NOINDEX === 'true';
const {
  title = 'GPTB Website',
  description = 'Static site powered by Astro. Content lives in Git.',
  canonical,
  ogType = 'website',
  noIndex = envNoIndex,
  isLandingPage = false,
  showBreadcrumbs = true,
  breadcrumbs,
} = Astro.props as Props;

const computedCanonical = canonical ?? (Astro.site ? new URL(Astro.url.pathname, Astro.site).toString() : undefined);

// Build default breadcrumbs from the current URL if none provided
const path = Astro.url.pathname;
const segments = path
  .split('/')
  .filter((s) => s.length > 0);

function humanize(segment: string) {
  const decoded = decodeURIComponent(segment.replace(/-/g, ' '));
  return decoded
    .split(' ')
    .map((w) => (w ? w[0].toUpperCase() + w.slice(1) : w))
    .join(' ');
}

let computedCrumbs: Array<{ label: string; href?: string }> = breadcrumbs ?? [];
if (!breadcrumbs) {
  const items: Array<{ label: string; href?: string }> = [];
  let acc = '';
  segments.forEach((seg, idx) => {
    acc += `/${seg}`;
    const isLast = idx === segments.length - 1;
    items.push({
      label: humanize(seg),
      href: isLast ? undefined : `${acc}/`,
    });
  });
  computedCrumbs = items;
}
---
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{title}</title>
    <meta name="description" content={description} />
    {noIndex && <meta name="robots" content="noindex, nofollow" />}
    {computedCanonical && <link rel="canonical" href={computedCanonical} />}
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content={ogType} />
    {computedCanonical && <meta property="og:url" content={computedCanonical} />}
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" href="/favicon.ico" sizes="any" />
    <link rel="alternate" type="application/rss+xml" title="RSS" href="/rss.xml" />
    <link rel="sitemap" type="application/xml" href="/sitemap-index.xml" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,400;0,700;1,400&display=swap&subset=vietnamese" rel="stylesheet">
    <style>
      /* Decorative light blue glow near top-right, similar to index.astro */
      .site-gradient {
        position: absolute;
        top: 0px;
        left: 0px;
        width: min(720px, 400px);
        height: min(520px, 220px);
        background: radial-gradient(100% 80% at 0% 0%, rgba(75, 183, 215, 0.28) 0%, rgba(75, 183, 215, 0) 60%);
        filter: blur(20px);
        opacity: 0.8;
        pointer-events: none;
      }
    </style>
    <slot name="head" />
  </head>
  <body class:list={[{'bg-warm-light text-warm-dark': !isLandingPage}]}>
    { !isLandingPage && <div class="site-gradient" aria-hidden="true"></div> }
    <main class:list={[{'max-w-3xl mx-auto px-4 py-8 relative z-10': !isLandingPage}]}>
      {(!isLandingPage && showBreadcrumbs && path !== '/') && (
        <nav aria-label="Breadcrumb" class="mb-6" itemscope itemtype="https://schema.org/BreadcrumbList">
          <ol class="flex flex-wrap items-center gap-1 text-sm text-gray-600">
            <li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem" class="inline-flex items-center gap-1">
              <a href="/" class="text-gray-600 no-underline hover:underline" itemprop="item"><span itemprop="name">Home</span></a>
              <meta itemprop="position" content="1" />
            </li>
            {computedCrumbs.length > 0 && <li aria-hidden="true" class="text-gray-400">/</li>}
            {computedCrumbs.map((c, i) => {
              const isLast = i === computedCrumbs.length - 1;
              return (
                <li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem" class="inline-flex items-center gap-1">
                  {c.href && !isLast ? (
                    <a href={c.href} class="text-gray-600 no-underline hover:underline" itemprop="item">
                      <span itemprop="name">{c.label}</span>
                    </a>
                  ) : (
                    <span class="text-gray-500" itemprop="name">{c.label}</span>
                  )}
                  <meta itemprop="position" content={(i + 2).toString()} />
                  {!isLast && <span aria-hidden="true" class="text-gray-400">/</span>}
                </li>
              );
            })}
          </ol>
        </nav>
      )}
      <slot />
    </main>
  </body>
</html>
