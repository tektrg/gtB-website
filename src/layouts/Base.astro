---
import '../styles/global.css';
// Conditionally import landing page styles for landing pages only
if (Astro.props.isLandingPage) {
  await import('../styles/landing-pages.css');
}
interface Props {
  title?: string;
  description?: string;
  canonical?: string;
  ogType?: 'website' | 'article';
  noIndex?: boolean;
  isLandingPage?: boolean;
  showBreadcrumbs?: boolean;
  breadcrumbs?: Array<{ label: string; href?: string }>;
}

const envNoIndex = import.meta.env.PUBLIC_NOINDEX === '1' || import.meta.env.PUBLIC_NOINDEX === 'true';
const {
  title = 'GPTB Website',
  description = 'Static site powered by Astro. Content lives in Git.',
  canonical,
  ogType = 'website',
  noIndex = envNoIndex,
  isLandingPage = false,
  showBreadcrumbs = true,
  breadcrumbs,
} = Astro.props as Props;

const computedCanonical = canonical ?? (Astro.site ? new URL(Astro.url.pathname, Astro.site).toString() : undefined);

// Build default breadcrumbs from the current URL if none provided
const path = Astro.url.pathname;
const segments = path
  .split('/')
  .filter((s) => s.length > 0);

function humanize(segment: string) {
  const decoded = decodeURIComponent(segment.replace(/-/g, ' '));
  return decoded
    .split(' ')
    .map((w) => (w ? w[0].toUpperCase() + w.slice(1) : w))
    .join(' ');
}

let computedCrumbs: Array<{ label: string; href?: string }> = breadcrumbs ?? [];
if (!breadcrumbs) {
  const items: Array<{ label: string; href?: string }> = [];
  let acc = '';
  segments.forEach((seg, idx) => {
    acc += `/${seg}`;
    const isLast = idx === segments.length - 1;
    items.push({
      label: humanize(seg),
      href: isLast ? undefined : `${acc}/`,
    });
  });
  computedCrumbs = items;
}
---
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{title}</title>
    <meta name="description" content={description} />
    {noIndex && <meta name="robots" content="noindex, nofollow" />}
    {computedCanonical && <link rel="canonical" href={computedCanonical} />}
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content={ogType} />
    {computedCanonical && <meta property="og:url" content={computedCanonical} />}
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" href="/favicon.ico" sizes="any" />
    <link rel="alternate" type="application/rss+xml" title="RSS" href="/rss.xml" />
    <link rel="sitemap" type="application/xml" href="/sitemap-index.xml" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,400;0,700;1,400&display=swap&subset=vietnamese" rel="stylesheet" />
    <!-- Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-30EX1TYBPM"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag() { dataLayer.push(arguments); }
      gtag('js', new Date());
      gtag('config', 'G-30EX1TYBPM');

      // Landing Page Conversion Tracking
      document.addEventListener('DOMContentLoaded', function() {
        // Track landing page views
        if (window.location.pathname.startsWith('/for-') || window.location.pathname.startsWith('/privacy-first')) {
          const landingPageType = window.location.pathname.replace('/', '').replace('-', '_');
          gtag('event', 'landing_page_view', {
            'page_type': landingPageType,
            'page_location': window.location.href,
            'page_title': document.title
          });
        }

        // Track CTA clicks
        document.addEventListener('click', function(e) {
          const target = e.target.closest('a');
          if (!target) return;

          // Track Chrome extension install clicks
          if (target.href && target.href.includes('chrome.google.com/webstore')) {
            const landingPage = window.location.pathname.replace('/', '') || 'homepage';
            gtag('event', 'chrome_extension_click', {
              'landing_page': landingPage,
              'button_text': target.textContent.trim(),
              'button_location': target.className.includes('btn-primary') ? 'primary' : 'secondary'
            });
          }

          // Track secondary CTA clicks
          if (target.href && (target.href.includes('#') || target.href.includes('/blog') || target.href.includes('guide'))) {
            const actionType = target.href.includes('#') ? 'scroll_to_section' : 
                             target.href.includes('/blog') ? 'blog_visit' : 'guide_access';
            gtag('event', 'secondary_cta_click', {
              'action_type': actionType,
              'landing_page': window.location.pathname.replace('/', '') || 'homepage',
              'button_text': target.textContent.trim()
            });
          }
        });

        // Track form submissions (if any future forms are added)
        document.addEventListener('submit', function(e) {
          if (e.target.tagName === 'FORM') {
            gtag('event', 'form_submit', {
              'form_type': e.target.id || 'unknown',
              'landing_page': window.location.pathname.replace('/', '') || 'homepage'
            });
          }
        });

        // Track scroll depth for engagement
        let maxScroll = 0;
        let scrollTimer;
        window.addEventListener('scroll', function() {
          clearTimeout(scrollTimer);
          scrollTimer = setTimeout(function() {
            const scrollPercent = Math.round((window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100);
            if (scrollPercent > maxScroll) {
              maxScroll = scrollPercent;
              // Track milestone scrolls
              if (scrollPercent >= 25 && maxScroll < 50) {
                gtag('event', 'scroll_depth', {
                  'depth': '25',
                  'landing_page': window.location.pathname.replace('/', '') || 'homepage'
                });
              } else if (scrollPercent >= 50 && maxScroll < 75) {
                gtag('event', 'scroll_depth', {
                  'depth': '50',
                  'landing_page': window.location.pathname.replace('/', '') || 'homepage'
                });
              } else if (scrollPercent >= 75 && maxScroll < 90) {
                gtag('event', 'scroll_depth', {
                  'depth': '75',
                  'landing_page': window.location.pathname.replace('/', '') || 'homepage'
                });
              } else if (scrollPercent >= 90) {
                gtag('event', 'scroll_depth', {
                  'depth': '90',
                  'landing_page': window.location.pathname.replace('/', '') || 'homepage'
                });
              }
            }
          }, 500);
        });

        // Track time on page for engagement analysis
        let startTime = Date.now();
        let engagementSent = false;
        
        function trackEngagement() {
          if (!engagementSent) {
            const timeOnPage = Math.round((Date.now() - startTime) / 1000);
            if (timeOnPage >= 30) { // 30 seconds threshold
              gtag('event', 'engaged_session', {
                'time_on_page': timeOnPage,
                'landing_page': window.location.pathname.replace('/', '') || 'homepage'
              });
              engagementSent = true;
            }
          }
        }

        // Track engagement on page leave
        window.addEventListener('beforeunload', trackEngagement);
        
        // Track engagement after 30 seconds
        setTimeout(trackEngagement, 30000);
      });
    </script>
    <script>
      // Table of Contents functionality
      document.addEventListener('DOMContentLoaded', function() {
        const tocList = document.getElementById('toc-list');
        const tocListMobile = document.getElementById('toc-list-mobile');
        const mobileBtn = document.getElementById('toc-mobile-btn');
        const mobileOverlay = document.getElementById('toc-mobile-overlay');
        const mobileClose = document.getElementById('toc-mobile-close');
        const desktopToggle = document.getElementById('toc-desktop-toggle');

        if (!tocList || !tocListMobile) return;

        // Generate TOC from headings
        function generateTOC() {
          const headings = document.querySelectorAll('main h1, main h2, main h3, main h4, main h5, main h6');
          if (headings.length === 0) {
            // Hide TOC elements if no headings found
            const tocSidebar = document.getElementById('toc-sidebar');
            const tocMobileBtn = document.getElementById('toc-mobile-btn');
            if (tocSidebar) tocSidebar.style.display = 'none';
            if (tocMobileBtn) tocMobileBtn.style.display = 'none';
            return;
          }

          const tocItems = [];
          
          headings.forEach((heading, index) => {
            // Create unique ID if not exists
            if (!heading.id) {
              heading.id = `heading-${index}`;
            }

            const level = parseInt(heading.tagName.charAt(1));
            const text = heading.textContent.trim();
            const id = heading.id;

            const listItem = document.createElement('li');
            const link = document.createElement('a');
            
            link.href = `#${id}`;
            link.textContent = text;
            link.className = `block py-1 px-2 rounded text-brand-muted hover:bg-gray-100 hover:text-brand-fg transition-colors no-underline`;
            
            // Add indentation based on heading level
            if (level > 1) {
              link.style.paddingLeft = `${(level - 1) * 0.75}rem`;
              link.classList.add('text-muted-light');
            }

            link.addEventListener('click', function(e) {
              e.preventDefault();
              heading.scrollIntoView({ behavior: 'smooth', block: 'start' });
              
              // Close mobile overlay if open
              if (mobileOverlay && !mobileOverlay.classList.contains('hidden')) {
              mobileOverlay.classList.add('hidden');
              }

              // Update active state
              document.querySelectorAll('.toc-active').forEach(el => el.classList.remove('toc-active', 'bg-accent-blue-light', 'text-accent-blue', 'bg-gray-200', 'text-brand-fg'));
              link.classList.add('toc-active', 'bg-gray-200', 'text-brand-fg');
            });

            listItem.appendChild(link);
            tocItems.push({ element: listItem.cloneNode(true), level });
          });

          // Populate both desktop and mobile TOCs
          tocItems.forEach(item => {
            tocList.appendChild(item.element);
            tocListMobile.appendChild(item.element.cloneNode(true));
          });

          // Re-bind click events for mobile TOC
          tocListMobile.querySelectorAll('a').forEach((link, index) => {
            const originalLink = tocList.querySelectorAll('a')[index];
            link.addEventListener('click', function(e) {
              e.preventDefault();
              const targetId = link.getAttribute('href');
              const target = document.querySelector(targetId);
              if (target) {
                target.scrollIntoView({ behavior: 'smooth', block: 'start' });
                mobileOverlay.classList.add('hidden');
                
                // Update active state in both TOCs
                document.querySelectorAll('.toc-active').forEach(el => el.classList.remove('toc-active', 'bg-accent-blue-light', 'text-accent-blue'));
                link.classList.add('toc-active', 'bg-accent-blue-light', 'text-accent-blue');
                originalLink.classList.add('toc-active', 'bg-accent-blue-light', 'text-accent-blue');
              }
            });
          });
        }

        // Mobile toggle functionality
        if (mobileBtn && mobileOverlay && mobileClose) {
          mobileBtn.addEventListener('click', function() {
            mobileOverlay.classList.toggle('hidden');
          });

          mobileClose.addEventListener('click', function() {
            mobileOverlay.classList.add('hidden');
          });

          mobileOverlay.addEventListener('click', function(e) {
            if (e.target === mobileOverlay) {
              mobileOverlay.classList.add('hidden');
            }
          });
        }

        // Desktop toggle functionality
        if (desktopToggle && tocList) {
          desktopToggle.addEventListener('click', function() {
            const expandIcon = document.getElementById('toc-expand-icon');
            const collapseIcon = document.getElementById('toc-collapse-icon');
            const isCollapsed = tocList.classList.contains('hidden');
            
            if (isCollapsed) {
              // Expand
              tocList.classList.remove('hidden');
              expandIcon.classList.add('hidden');
              collapseIcon.classList.remove('hidden');
            } else {
              // Collapse
              tocList.classList.add('hidden');
              expandIcon.classList.remove('hidden');
              collapseIcon.classList.add('hidden');
            }
          });
        }

        // Initialize TOC
        generateTOC();

        // Highlight current section on scroll (optional enhancement)
        let ticking = false;
        function updateActiveSection() {
          if (!ticking) {
            requestAnimationFrame(function() {
              const headings = document.querySelectorAll('main h1, main h2, main h3, main h4, main h5, main h6');
              const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
              
              let current = null;
              headings.forEach(heading => {
                const rect = heading.getBoundingClientRect();
                if (rect.top <= 100) {
                  current = heading;
                }
              });

              if (current) {
                document.querySelectorAll('.toc-active').forEach(el => el.classList.remove('toc-active', 'bg-accent-blue-light', 'text-accent-blue'));
                const activeLinks = document.querySelectorAll(`a[href="#${current.id}"]`);
                activeLinks.forEach(link => link.classList.add('toc-active', 'bg-accent-blue-light', 'text-accent-blue'));
              }

              ticking = false;
            });
            ticking = true;
          }
        }

        window.addEventListener('scroll', updateActiveSection);
      });
    </script>
    <style>
      /* Decorative light blue glow near top-right, similar to index.astro */
      .site-gradient {
        position: absolute;
        top: 0px;
        left: 0px;
        width: min(720px, 400px);
        height: min(520px, 220px);
        background: radial-gradient(100% 80% at 0% 0%, theme('colors.accent-blue-light') 0%, rgba(75, 183, 215, 0) 60%);
        filter: blur(20px);
        opacity: 0.8;
        pointer-events: none;
      }
    </style>
    <slot name="head" />
  </head>
  <body class:list={[{ 'bg-warm-light text-warm-dark': !isLandingPage }]}> 
    {!isLandingPage && <div class="site-gradient" aria-hidden="true"></div>}
    
    <!-- Table of Contents - Desktop Sidebar -->
    {!isLandingPage && (
      <nav id="toc-sidebar" class="fixed left-4 top-24 w-[20%] h-[calc(100vh-6rem)] overflow-y-auto p-4 z-20 hidden lg:block">
        <button id="toc-desktop-toggle" class="flex items-center justify-around w-full mb-3 text-left rounded p-2 -m-2 transition-colors" aria-label="Toggle table of contents">
            <h3 class="text-sm font-semibold text-brand-fg uppercase tracking-wide" style="margin:0;">Table of Contents</h3>
          <svg id="toc-expand-icon" class="w-4 h-4 text-brand-muted" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
          </svg>
          <svg id="toc-collapse-icon" class="w-4 h-4 text-brand-muted hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path>
          </svg>
        </button>
        <ul id="toc-list" class="space-y-1 text-sm list-none hidden"></ul>
      </nav>
    )}

    <!-- Table of Contents - Mobile Toggle -->
    {!isLandingPage && (
      <div>
        <!-- Mobile TOC Button -->
        <button 
          id="toc-mobile-btn" 
          class="fixed bottom-6 left-6 w-12 h-12 bg-ui-surface/70 backdrop-blur-md text-brand-fg rounded-full shadow-lg z-30 flex items-center justify-center lg:hidden transition-transform hover:scale-105"
          aria-label="Toggle table of contents"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
        
        <!-- Mobile TOC Overlay -->
        <div id="toc-mobile-overlay" class="fixed inset-0 bg-black-50 z-40 hidden lg:hidden">
          <nav class="fixed left-4 right-4 bottom-20 max-h-96 overflow-y-auto bg-ui-surface rounded-lg p-4 shadow-xl">
            <div class="flex items-center justify-between mb-3">
              <h3 class="text-sm font-semibold text-brand-fg uppercase tracking-wide">Table of Contents</h3>
              <button id="toc-mobile-close" class="text-brand-muted hover:text-brand-fg">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
            <ul id="toc-list-mobile" class="space-y-1 text-sm list-none"></ul>
          </nav>
        </div>
      </div>
    )}

    <main class:list={[{ 'max-w-3xl mx-auto px-4 py-8 relative z-10': !isLandingPage }]}> 
      {!isLandingPage && showBreadcrumbs && path !== '/' && (
        <nav aria-label="Breadcrumb" class="mb-6" itemscope itemtype="https://schema.org/BreadcrumbList">
          <ol class="flex flex-wrap items-center gap-1 text-sm text-brand-muted">
            <li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem" class="inline-flex items-center gap-1">
              <a href="/" class="text-brand-muted no-underline hover:underline" itemprop="item"><span itemprop="name">GPT Breeze</span></a>
              <meta itemprop="position" content="1" />
            </li>
            {computedCrumbs.length > 0 && <li aria-hidden="true" class="text-muted-light" style="list-style: none;">/</li>}
            {computedCrumbs.map((c, i) => {
              const isLast = i === computedCrumbs.length - 1;
              return (
                <li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem" class="inline-flex items-center gap-1">
                  {c.href && !isLast ? (
                    <a href={c.href} class="text-brand-muted no-underline hover:underline" itemprop="item">
                      <span itemprop="name">{c.label}</span>
                    </a>
                  ) : (
                    <span class="text-muted-light" itemprop="name">{c.label}</span>
                  )}
                  <meta itemprop="position" content={(i + 2).toString()} />
                  {!isLast && <span aria-hidden="true" class="text-muted-light">/</span>}
                </li>
              );
            })}
          </ol>
        </nav>
      )}
      <slot />
    </main>
    
    <footer style="padding: 24px 0 48px; border-top: 1px solid var(--border); color: var(--muted); font-size: 0.95rem; background: transparent;">
      <div style="max-width: var(--maxw, 1200px); margin: 0 auto; padding: 0 20px;">
        <div style="display: grid; gap: 16px; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));">
          <div>©2025 GPT Breeze — All Rights Reserved</div>
          <div><a href="/privacy">Privacy Policy</a></div>
        </div>
      </div>
    </footer>
  </body>
</html>
